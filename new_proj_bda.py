# -*- coding: utf-8 -*-
"""new_proj_bda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zvdgtKcq-WhwkxgERqLCluxL5AV_Met
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import csv
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import statsmodels.formula.api as smf
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Setting display options and style
pd.options.display.float_format = '{:,.2f}'.format
sns.set()

# Define the path to the "new" folder in Google Drive
base_path = '/content/drive/My Drive/new/'

# Load the datasets from the Google Drive folder
airlines = pd.read_csv(f'{base_path}airlines.csv')
airports = pd.read_csv(f'{base_path}airports.csv')
data = pd.read_csv(f'{base_path}flight.csv')

# Data inspection
print(data.shape)
print(data.head().T)

# Filtering and cleaning data
data = data[data['CANCELLED'] == 0]
data = data[data['DIVERTED'] == 0]
data = data.drop(['FLIGHT_NUMBER', 'TAIL_NUMBER', 'DIVERTED', 'CANCELLED', 'CANCELLATION_REASON'], axis=1)
data['AIRCRAFT_SPEED'] = data['DISTANCE'] / (data['AIR_TIME'] / 60)

# Merging datasets
data = pd.merge(data, airlines, left_on='AIRLINE', right_on='IATA_CODE', how='left')
data.rename(columns={'AIRLINE_x': 'AIRLINE_CODE'}, inplace=True)
data.insert(loc=5, column='AIRLINE', value=data.AIRLINE_y)
data = data.drop(['IATA_CODE', 'AIRLINE_y'], axis=1)

data = pd.merge(data, airports[['IATA_CODE', 'CITY']], left_on='ORIGIN_AIRPORT', right_on='IATA_CODE')
data.insert(loc=7, column='ORIGIN_CITY', value=data.CITY)
data = data.drop(['IATA_CODE', 'CITY'], axis=1)

data = pd.merge(data, airports[['IATA_CODE', 'CITY']], left_on='DESTINATION_AIRPORT', right_on='IATA_CODE')
data.insert(loc=9, column='DESTINATION_CITY', value=data.CITY)
data = data.drop(['IATA_CODE', 'CITY'], axis=1)

print(data.head(2).T)

# Handling missing data
missing_dict = {'Missing Data': data.isna().sum(), 'Percentage': 100 * data.isna().sum() / len(data)}
missing = pd.DataFrame(data=missing_dict)
print(missing)

# Filtering delayed flights
data_delay = data[data['ARRIVAL_DELAY'] >= 15]
print(data_delay.isna().sum())

# Aggregating delay data
net_delay = data_delay.groupby('AIRLINE')[['ARRIVAL_DELAY']].count()
total_flights = data.groupby('AIRLINE')[['YEAR']].count()

percentage = pd.concat([net_delay, total_flights], axis=1)
percentage.columns = ['net_delay', 'total_flights']
percentage.insert(loc=2, column='percentage', value=100 * (percentage['net_delay'] / percentage['total_flights']))
percentage['rank'] = percentage['percentage'].rank(ascending=False).astype(int)
percentage = percentage.sort_values(by='rank').reset_index()
print(percentage)

# Visualization of percentage of flight delays
plt.figure(figsize=(18, 8))
sns.barplot(x='AIRLINE', y='percentage', data=percentage, palette='rocket')
plt.xticks(rotation=80, fontsize=15)
plt.title('Percentage of flight delays in descending order', color='black', fontweight="bold", fontsize=25)
plt.xlabel('US Airlines', fontsize=25)
plt.ylabel('Percentage (%)', fontsize=25)
plt.yticks(fontsize=20)
plt.show()

# Pie chart of flight delays
airline_list = percentage.AIRLINE.T.tolist()
flights_list = percentage.total_flights.T.tolist()
explode = (0.2,) + (0,) * (len(airline_list) - 1)
colors = sns.color_palette("tab20", len(airline_list))

plt.figure(figsize=(18, 8))
plt.pie(flights_list, explode=explode, labels=airline_list, colors=colors, autopct='%1.1f%%', textprops={'size': 'smaller'})
plt.axis('equal')
plt.tight_layout()
plt.show()

# Delay reasons analysis
data_delay_long = data_delay.melt(
    id_vars=['YEAR', 'MONTH', 'DAY', 'DAY_OF_WEEK', 'AIRLINE_CODE', 'AIRLINE', 'ORIGIN_AIRPORT', 'ORIGIN_CITY', 'DESTINATION_AIRPORT', 'DESTINATION_CITY', 'SCHEDULED_DEPARTURE', 'DEPARTURE_TIME', 'DEPARTURE_DELAY', 'TAXI_OUT', 'WHEELS_OFF', 'SCHEDULED_TIME', 'ELAPSED_TIME', 'AIR_TIME', 'DISTANCE', 'WHEELS_ON', 'TAXI_IN', 'SCHEDULED_ARRIVAL', 'ARRIVAL_TIME', 'ARRIVAL_DELAY', 'AIRCRAFT_SPEED'],
    value_vars=['AIR_SYSTEM_DELAY', 'SECURITY_DELAY', 'AIRLINE_DELAY', 'LATE_AIRCRAFT_DELAY', 'WEATHER_DELAY'],
    var_name='TYPE_OF_DELAY',
    value_name='DURATION'
)
data_delay_long = data_delay_long[data_delay_long['DURATION'] > 0]

delay_reason = data_delay_long.groupby('TYPE_OF_DELAY')[['DURATION']].median().reset_index()
plt.figure(figsize=(18, 4))
sns.barplot(x='TYPE_OF_DELAY', y='DURATION', data=delay_reason, palette='rocket')
plt.xticks(rotation=15, fontsize=15)
plt.title('Reasons for Delay', color='Black', fontweight="bold", fontsize=25)
plt.xlabel('Reasons', fontsize=25)
plt.ylabel('Median (Minutes)', fontsize=25)
plt.ylim(0, 35)
plt.yticks(fontsize=20)
plt.show()

# Competitor analysis
data_delay_long2 = data_delay_long[
    data_delay_long['AIRLINE_CODE'].isin(['NK', 'WN', 'F9'])
]
sns.catplot(
    x='AIRLINE', y='DURATION', hue='TYPE_OF_DELAY', kind='bar',
    data=data_delay_long2, height=6, aspect=3, palette='rocket'
)
plt.xticks(rotation=45, fontsize=20)
plt.title('Reasons for delay (Between Competitors)', color='black', fontweight="bold", fontsize=25)
plt.xlabel('Airlines', fontsize=25)
plt.ylabel('Duration (Minutes)', fontsize=25)
plt.yticks(fontsize=20)
plt.show()